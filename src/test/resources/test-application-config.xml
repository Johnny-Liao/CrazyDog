<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 引入属性文件 集中管理配置属性-->
    <context:property-placeholder location="classpath:config.properties"/>

    <!--Spring扫描以下包进行IOC操作-->
    <context:component-scan base-package="org.crazydog.daoI.impl,org.crazydog.serviceI.impl"/>

    <!--开启注解-->
    <context:annotation-config/>

    <!--使用最简单的JDBC数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="driverClassName" value="${driverClassName}"/>
    </bean>

    <!--使用Spring提供的SessionFactory进行Hibernate的初始化工作-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!--<property name="configLocation"-->
        <!--value="classpath:hibernate.cfg.xml"/>-->
        <property name="dataSource" ref="dataSource"/>

        <!-- 自动扫描注解方式配置的hibernate实体类文件 -->
        <property name="packagesToScan">
            <list>
                <value>org.crazydog.domain</value>
            </list>
        </property>

        <!--hibernate的配置属性-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            </props>
        </property>
    </bean>

    <!--配置HibernateTemplate模板-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="checkWriteOperations" value="false"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--proxy-target-class="true"配置是强制使用CGLIB生成bean的代理类 默认如果类实现了接口将使用jdk生成代理对象
    强制使用CGLib生成的代理类是本类的子类-->
    <aop:config>
        <!--配置切点，是的所有的业务执行的时候都有事务支持-->
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* org.crazydog.daoI.impl..*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice"/>
    </aop:config>

    <!-- 拦截器方式配置事务 通知定位拦截的方法，并配置了事务的传播属性，默认是REQUIRED 所以没有指出-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="save*"/>
            <tx:method name="update*"/>
            <tx:method name="modify*"/>
            <tx:method name="edit*"/>
            <tx:method name="delete*"/>
            <tx:method name="remove*"/>
            <tx:method name="repair"/>
            <tx:method name="deleteAndRepair"/>

            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="load*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <tx:method name="datagrid*" propagation="SUPPORTS"/>

            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

</beans>